{"version":3,"sources":["components/Feedback/FeedbackOptions.js","components/Feedback/Statistics.js","components/Feedback/Section.js","App.js","reportWebVitals.js","index.js","components/Feedback/Feedback.module.css"],"names":["FeedbackOptions","onLeaveFeedback","className","s","ControlsList","name","type","onClick","Statistics","good","neutral","bad","totalFeedback","positiveFeedbackPercentage","Boolean","StatisticList","Section","children","title","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Container","e","target","state","Math","floor","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PA6BeA,EA1BS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,gCACE,uDAEA,qBAAIC,UAAWC,IAAEC,aAAjB,UACE,6BACE,wBAAQC,KAAK,OAAOC,KAAK,SAASC,QAASN,EAA3C,oBAKF,6BACE,wBAAQI,KAAK,UAAUC,KAAK,SAASC,QAASN,EAA9C,uBAKF,6BACE,wBAAQI,KAAK,MAAMC,KAAK,SAASC,QAASN,EAA1C,0BCWOO,EA7BI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,cACAC,EALiB,EAKjBA,2BALiB,OAOjB,gCACE,4CAECC,QAAQF,GACP,gCACE,qBAAIV,UAAWC,IAAEY,cAAjB,UACE,wCAAWN,EAAX,OACA,2CAAcC,KACd,uCAAUC,QAGZ,gCACE,wCAAWC,KACX,oDAAuBC,WAI3B,sDClBSG,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACd,yBAASA,MAAOA,EAAOhB,UAAWC,IAAEa,QAApC,SACGC,KCuGUE,MApGf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNX,EADM,KACAY,EADA,OAEiBD,mBAAS,GAF1B,mBAENV,EAFM,KAEGY,EAFH,OAGSF,mBAAS,GAHlB,mBAGNT,EAHM,KAGDY,EAHC,KA0BPC,EAAqB,WACzB,OAAOf,EAAOC,EAAUC,GAS1B,OACE,sBAAKT,UAAWC,IAAEsB,UAAlB,UACE,cAAC,EAAD,CAASP,MAAM,kBAAf,SACE,cAAC,EAAD,CAAiBjB,gBAlCA,SAAAyB,GAGrB,OAFmBA,EAAEC,OAAOtB,MAG1B,IAAK,OACHgB,GAAQ,SAAAO,GAAK,OAAIA,EAAQ,KACzB,MAEF,IAAK,UACHN,GAAW,SAAAM,GAAK,OAAIA,EAAQ,KAC5B,MAEF,IAAK,MACHL,GAAO,SAAAK,GAAK,OAAIA,EAAQ,KACxB,MAEF,QACE,aAoBF,cAAC,EAAD,CAASV,MAAM,aAAf,SACE,cAAC,EAAD,CACET,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,cAAeY,IACfX,2BAlBgC,WACtC,GAAIW,IACF,OAAOK,KAAKC,MAAOrB,EAAOe,IAAwB,KAAO,IAgBzBO,WC5CvBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,aAAe,+BAA+B,UAAY,4BAA4B,cAAgB,mC","file":"static/js/main.c5d6ebee.chunk.js","sourcesContent":["import React from 'react';\nimport s from './Feedback.module.css';\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\n  <div>\n    <h2>Please leave feedback</h2>\n\n    <ul className={s.ControlsList}>\n      <li>\n        <button name=\"good\" type=\"button\" onClick={onLeaveFeedback}>\n          Good\n        </button>\n      </li>\n\n      <li>\n        <button name=\"neutral\" type=\"button\" onClick={onLeaveFeedback}>\n          Neutral\n        </button>\n      </li>\n\n      <li>\n        <button name=\"bad\" type=\"button\" onClick={onLeaveFeedback}>\n          Bad\n        </button>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport s from './Feedback.module.css';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  totalFeedback,\n  positiveFeedbackPercentage,\n}) => (\n  <div>\n    <h2>Statistics</h2>\n\n    {Boolean(totalFeedback) ? (\n      <div>\n        <ul className={s.StatisticList}>\n          <li>Good: {good} </li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad: {bad}</li>\n        </ul>\n\n        <div>\n          <p>Total: {totalFeedback}</p>\n          <p>Positive feedback: {positiveFeedbackPercentage}</p>\n        </div>\n      </div>\n    ) : (\n      <p>No feedback given</p>\n    )}\n  </div>\n);\n\nexport default Statistics;\n","import React from 'react';\nimport s from './Feedback.module.css';\n\nconst Section = ({ children, title }) => (\n  <section title={title} className={s.Section}>\n    {children}\n  </section>\n);\n\nexport default Section;\n","import { useState } from 'react';\n// import React, { Component } from 'react';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Feedback/Statistics';\nimport Section from './components/Feedback/Section';\n\nimport s from './components/Feedback/Feedback.module.css';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleFeedback = e => {\n    const buttonName = e.target.name;\n\n    switch (buttonName) {\n      case 'good':\n        setGood(state => state + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(state => state + 1);\n        break;\n\n      case 'bad':\n        setBad(state => state + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    if (countTotalFeedback()) {\n      return Math.floor((good / countTotalFeedback()) * 100) + '%';\n    }\n  };\n\n  return (\n    <div className={s.Container}>\n      <Section title=\"FeedbackOptions\">\n        <FeedbackOptions onLeaveFeedback={handleFeedback} />\n      </Section>\n\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          totalFeedback={countTotalFeedback()}\n          positiveFeedbackPercentage={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   handleFeedback = e => {\n//     const buttonName = e.target.name;\n//     setState(prevState => ({ [buttonName]: prevState[buttonName] + 1 }));\n//   };\n\n//   countTotalFeedback = () => {\n//     return good + neutral + bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     if (countTotalFeedback()) {\n//       return (\n//         Math.floor((good / countTotalFeedback()) * 100) + '%'\n//       );\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div className={s.Container}>\n//         <Section title=\"FeedbackOptions\">\n//           <FeedbackOptions onLeaveFeedback={handleFeedback} />\n//         </Section>\n\n//         <Section title=\"Statistics\">\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             totalFeedback={countTotalFeedback()}\n//             positiveFeedbackPercentage={countPositiveFeedbackPercentage()}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlsList\":\"Feedback_ControlsList__2f5wU\",\"Container\":\"Feedback_Container__MTrBF\",\"StatisticList\":\"Feedback_StatisticList__1acoM\"};"],"sourceRoot":""}